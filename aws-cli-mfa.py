#!/usr/bin/env python3

# Follow the directions from AWS on using MFA with CLI:
#  https://aws.amazon.com/premiumsupport/knowledge-center/authenticate-mfa-cli/

# That means: call STS with an ARN and an MFA token,
#  with the response, populate an MFA section in aws creds file
#  and, by default, use that profile after you run this

# sudo cp ./aws-cli-mfa.py /usr/bin/aws-cli-mfa && sudo chmod +x /usr/bin/aws-cli-mfa


import os
import json
import configparser
import argparse

from pathlib import Path


def parse_cli_args():
    argparser = argparse.ArgumentParser(description='Process some integers.')

    argparser.add_argument('profile_arn', metavar='profile-arn',
        help='the AWS ARN for your MFA profile')
    argparser.add_argument('mfa_token', metavar='mfa-token',
        help='the MFA token from your authenticator app for the MFA profile your ARN is for')
    argparser.add_argument('-p', '--aws-profile',
        help='AWS profile to use when contacting STS to get MFA credentials')
    argparser.add_argument('-s', '--aws-creds-mfa-section', default='mfa',
        help='section to save MFA credentials to in AWS credentials file (default: mfa)')
    argparser.add_argument('-f', '--aws-creds-file', default=str(Path.home())+'/.aws/credentials',
        help='file path to AWS credentials file (default: ~/.aws/credentials)')
    argparser.add_argument('-e', '--aws-env-vars', action='store_true',
        help='export/set AWS access/secret/session env vars instead of updating creds file')
    argparser.add_argument('-x', '--no-export-profile', action='store_true',
        help='do not export/set AWS_PROFILE to the one generated by STS')
    argparser.add_argument('-d', '--lifetime-duration', type=int,
        help='do not export/set AWS_PROFILE to the one generated by STS')

    return argparser.parse_args()


def gen_sts_cmd(cli_args):
    sts_args = []

    if cli_args.aws_profile:
        sts_args.append(f'--profile {cli_args.aws_profile}')

    sts_args.append(f'--serial-number {cli_args.profile_arn}')
    sts_args.append(f'--token-code {cli_args.mfa_token}')

    if cli_args.lifetime_duration:
        sts_args.append(f'--duration-seconds {cli_args.lifetime_duration}')

    return f"aws sts get-session-token {' '.join(sts_args)}"


def write_config(cli_args, sts_json):
    config = configparser.ConfigParser()
    config.read(cli_args.aws_creds_file)

    config[cli_args.aws_creds_mfa_section] = {
        'aws_access_key_id': sts_json["Credentials"]["AccessKeyId"],
        'aws_secret_access_key': sts_json["Credentials"]["SecretAccessKey"],
        'aws_session_token': sts_json["Credentials"]["SessionToken"],
    }

    with open(cli_args.aws_creds_file, 'w') as configfile:
       config.write(configfile)


def write_env_vars(sts_json):
    os.environ['AWS_ACCESS_KEY_ID'] = sts_json["Credentials"]["AccessKeyId"]
    os.environ['AWS_SECRET_ACCESS_KEY'] = sts_json["Credentials"]["SecretAccessKey"]
    os.environ['AWS_SESSION_TOKEN'] = sts_json["Credentials"]["SessionToken"]


def set_aws_profile(cli_args):
    os.environ['AWS_PROFILE'] = cli_args.aws_creds_mfa_section


if __name__ == '__main__':
    cli_args = parse_cli_args()
    sts_cmd = gen_sts_cmd(cli_args)
    print(sts_cmd)
    sts_output = os.popen(sts_cmd).read()
    sts_json = json.loads(sts_output)

    if cli_args.aws_env_vars:
        write_env_vars(cli_args, sts_json)
    else:
        write_config(cli_args, sts_json)

    if not cli_args.no_export_profile:
        set_aws_profile(cli_args)

    print(f'Updated AWS MFA creds')
